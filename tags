!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ALIGN	includes.h	66;"	d
COLLECTOR_MODE	includes.h	61;"	d
DEBUG	includes.h	57;"	d
DEBUG	includes.h	59;"	d
GENERATOR_MODE	includes.h	62;"	d
INCLUDES_H	includes.h	8;"	d
INIT_LIST_HEAD	list.h	/^static inline void INIT_LIST_HEAD(struct list_head *list)$/;"	f
LOG_DEBUG	includes.h	81;"	d
LOG_ERROR	includes.h	78;"	d
LOG_FAULT	includes.h	77;"	d
LOG_INFO	includes.h	80;"	d
LOG_WARN	includes.h	79;"	d
L_HASH_H	hash.h	9;"	d
ONE	main.c	11;"	d	file:
PAGE_SHIFT	includes.h	50;"	d
PROCBLOCK_SIZE	includes.h	49;"	d
TRACE	includes.h	83;"	d
VERIFY	includes.h	68;"	d
__LIST_H_	list.h	10;"	d
__list_add	list.h	/^static inline void __list_add(struct list_head *new,$/;"	f
__list_del	list.h	/^static inline void __list_del(struct list_head * prev, struct list_head * next)$/;"	f
blist	list.h	/^struct blist$/;"	s
bool	includes.h	52;"	d
bucket	hash.h	/^typedef struct bucket { $/;"	s
bucket_t	hash.h	/^} bucket_t; $/;"	t	typeref:struct:bucket
buckets	hash.h	/^        bucket_t *buckets;$/;"	m	struct:hash_table
count	hash.h	/^    uint32_t count;$/;"	m	struct:bucket
delete_handler	hash.h	/^typedef void (delete_handler)(hash_table * ht, bucket_t * bucket);$/;"	t
exit_if_ptr_is_null	hash.c	/^static inline void exit_if_ptr_is_null(void * ptr,const char * message) $/;"	f	file:
false	includes.h	54;"	d
global_trace	main.c	/^int global_trace = ONE(4);$/;"	v
hash_add_item	hash.c	/^int  hash_add_item(hash_table ** htp, uint32_t key, void * value )$/;"	f
hash_count	hash.c	/^uint32_t hash_count(hash_table * ht)$/;"	f
hash_create	hash.c	/^hash_table * hash_create(int num)$/;"	f
hash_lookup_item	hash.c	/^void * hash_lookup_item(hash_table * ht, uint32_t key, void * value)$/;"	f
hash_table	hash.h	/^typedef struct hash_table {$/;"	s
hash_table	hash.h	/^} hash_table;$/;"	t	typeref:struct:hash_table
hash_travel_delete	hash.c	/^void  hash_travel_delete(hash_table * ht,delete_handler * delete_item)$/;"	f
item	list.h	/^	void * item;$/;"	m	struct:blist
list	hash.h	/^    struct list_head list;$/;"	m	struct:bucket	typeref:struct:bucket::list_head
list_add	list.h	/^static inline void list_add(struct list_head *new, struct list_head *head)$/;"	f
list_add_tail	list.h	/^static inline void list_add_tail(struct list_head *new, struct list_head *head)$/;"	f
list_del	list.h	/^static inline void list_del(struct list_head *entry)$/;"	f
list_empty	list.h	/^static inline int list_empty(const struct list_head *head)$/;"	f
list_entry	list.h	75;"	d
list_for_each	list.h	78;"	d
list_for_each_safe	list.h	82;"	d
list_head	list.h	/^struct list_head {$/;"	s
list_move_tail	list.h	/^static inline void list_move_tail(struct list_head *list,$/;"	f
listhead	list.h	/^	struct list_head listhead;$/;"	m	struct:blist	typeref:struct:blist::list_head
lock	hash.h	/^    pthread_mutex_t  lock;$/;"	m	struct:bucket
main	main.c	/^int main(int argc,char ** argv)$/;"	f
next	list.h	/^	struct list_head* next; $/;"	m	struct:list_head	typeref:struct:list_head::list_head
next_prime	hash.c	/^static int next_prime(int x)$/;"	f	file:
num_buckets	hash.h	/^        int num_buckets;$/;"	m	struct:hash_table
prev	list.h	/^	struct list_head* prev;$/;"	m	struct:list_head	typeref:struct:list_head::list_head
true	includes.h	53;"	d
